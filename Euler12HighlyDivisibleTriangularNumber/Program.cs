using System;
using System.Collections.Generic;
using static EulerUtils.EulerUtils;
using System.Linq;

namespace Euler12HighlyDivisibleTriangularNumber
{
    class Program
    {
        static void Main(string[] args)
        {
            /// <summary>
            /// The sequence of triangle numbers is generated by adding the natural numbers. 
            /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
            /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
            /// Let us list the factors of the first seven triangle numbers:
            /// 1: 1
            /// 3: 1,3
            /// 6: 1,2,3,6
            /// 10: 1,2,5,10
            /// 15: 1,3,5,15
            /// 21: 1,3,7,21
            /// 28: 1,2,4,7,14,28
            /// We can see that 28 is the first triangle number to have over five divisors.
            /// What is the value of the first triangle number to have over five hundred divisors ?
            /// </summary>
            /// 
            //hashsets have uniqueness built in. Using this allows for only distinct divisors to populate the IEnumerable. 
            //Alternatively you can use linq and .Distinct on the return of the list.
            HashSet<int> divisors = new HashSet<int>();
            divisors = FindDivisors(100);
            int triangularNumber = 0;
            for (int i = 0; divisors.Count < 500; i++)
            {
                triangularNumber += i;
                divisors = FindDivisors(triangularNumber);
            }
        }

        static HashSet<int> FindDivisors(int num)
        {
            HashSet<int> divisors = new HashSet<int>();
            int count = 0;
            for (int i = 1; i <= Math.Sqrt(num); i++)
            {
                if (num % i == 0)
                {
                    count++;
                    divisors.Add(i);
                    divisors.Add(num / i);
                }
            }
            return divisors;
        }
    }
}
